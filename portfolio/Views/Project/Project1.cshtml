@model Portfolio.Models.Project
@using System.Security.Claims

<link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
<script src="https://cdn.quilljs.com/1.3.6/quill.min.js"></script>


@{
    ViewData["Title"] = Model?.Title ?? "Project Details";
    var isAuthenticated = User.Identity.IsAuthenticated;
    var loginUrl = Url.Page("/Account/Login", new { area = "Identity", returnUrl = ViewContext.HttpContext.Request.Path });

}
<main id="currmain" class="@(User.Identity.IsAuthenticated ? "authenticated" : "")">
    <header class="hero">
        <div class="hero-image-container">
            <img class="hero-image" src="@Model.Image.Path" alt="@Model.Title">
        </div>
        <div class="hero-text">
            <h1>@Model.Title</h1>
            <p>@Model.ShortDescription</p>
        </div>
    </header>
    <div class="divider"></div>

    <section class="project-details">
        <div class="container">
            <h2>Project Details</h2>
            <p>@Html.Raw(@Model.Description)</p>
        </div>
    </section>
    <div class="divider"></div>
    <section class="comments">
        <div class="container">
            <h2>Comments</h2>
            <button class="revealAddCommentSection">Add Comment</button>
            <section class="addCommentSection" style="display: none;">
                @*  <form id="addCommentForm" method="post" enctype="multipart/form-data" action="/Comment/AddComment">
                    <input type="hidden" name="projectId" value="@Model.Id" />
                    <label for="createCommentText">текст на коментара (опционален)</label>
                    <textarea id="createCommentText" name="commentText" placeholder="Write your comment here..."></textarea>
                    <label for="createCommentImage">снимка на коментара (опционален)</label>
                    <input id="createCommentImage" type="file" name="commentImage" accept="image/*">
                    <button type="submit">Submit Comment</button>
                    <p id="errorMessage" style="color: red; display: none;">Моля, въведете текст или качете снимка.</p>
                </form> *@
                <form id="addCommentForm" method="post" enctype="multipart/form-data" action="/Comment/AddComment">
                    <input type="hidden" name="projectId" value="@Model.Id" />

                    <label for="editorComment">Текст на коментара (опционален)</label>
                    <div id="editorComment" class="form-control"></div>
                    <input type="hidden" id="createCommentText" name="commentText">

                    <label for="createCommentImage">Снимка на коментара (опционален)</label>
                    <input id="createCommentImage" type="file" name="commentImage" accept="image/*">

                    <button type="submit">Submit Comment</button>
                    <p id="errorMessage" style="color: red; display: none;">Моля, въведете текст или качете снимка.</p>
                </form>

            </section>






            @if (Model?.Comments != null && Model.Comments.Any())
            {
                @foreach (var comment in Model.Comments)
                {
                    <div class="comment" data-comment-id="@comment.Id">
                        <img class="profile-picture" src="@(comment.User?.ProfilePicture?.Path ?? "default-profile-picture.jpg")" alt="Profile Picture" />
                        <div class="comment-content">
                            <div class="comment-header">
                                <p><strong><span class="username">@(comment.User?.UserName ?? "Unknown User")</span></strong> <span class="comment-date">@comment.DateAdded.ToString("dd MMM yyyy")</span></p>

                                @if (User.IsInRole("Admin") || (comment.UserId + "") == User.FindFirstValue(ClaimTypes.NameIdentifier))
                                {
                                    <div class="dropdown comment-menu">
                                        <button class="btn dropdown-toggle" type="button" id="dropdownMenu@(comment.Id)" data-bs-toggle="dropdown" aria-expanded="false">
                                            <i class="fa fa-ellipsis-v"></i>
                                        </button>
                                        <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="dropdownMenu@(comment.Id)">
                                            <li><button class="dropdown-item edit-comment-btn" data-comment-id="@comment.Id">Edit</button></li>
                                            <li><button class="dropdown-item delete-comment-btn" data-comment-id="@comment.Id">Delete</button></li>
                                        </ul>
                                    </div>
                                }
                            </div>

                            <div class="comment-body" id="comment-body-@comment.Id">
                                @if (comment.Image != null)
                                {
                                    <img style="width:350px" class="comment-image" src="@comment.Image.Path" alt="Comment Image" id="comment-image-@comment.Id" />
                                }
                                @if (!string.IsNullOrEmpty(comment.Text))
                                {
                                    <p id="comment-text-@comment.Id">@Html.Raw(comment.Text)</p>
                                }
                            </div>

                            <div class="edit-form-container" id="edit-form-@comment.Id" style="display: none;">
                                <form id="edit-comment-form-@comment.Id" enctype="multipart/form-data">
                                    <div class="mb-3">
                                        <textarea class="form-control" id="edit-text-@comment.Id" name="commentText">@comment.Text</textarea>
                                    </div>
                                    <div class="mb-3">
                                        <label for="edit-image-@comment.Id" class="form-label">Change Image (optional)</label>
                                        <input type="file" class="form-control" id="edit-image-@comment.Id" name="commentImage" accept="image/*">
                                        @if (comment.Image != null)
                                        {
                                            <div class="form-text">Leave empty to keep current image</div>
                                        }
                                    </div>
                                    <input type="hidden" name="commentId" value="@comment.Id">
                                    <button type="button" class="btn btn-primary save-edit-btn" data-comment-id="@comment.Id">Save</button>
                                    <button type="button" class="btn btn-secondary cancel-edit-btn" data-comment-id="@comment.Id">Cancel</button>
                                </form>
                            </div>

                            <div class="comment-actions">
                                <span class="like-count">@comment.LikedComments.Count</span>
                                @if (User.Identity.IsAuthenticated)
                                {
                                    <i class="fa @(comment.LikedComments.Any(l => l.UserId == int.Parse(User.FindFirstValue(ClaimTypes.NameIdentifier))) ? "fa-heart" : "fa-heart-o") like-button"
                                       data-comment-id="@comment.Id"></i>
                                }
                                else
                                {
                                    <i class="fa fa-heart-o like-button" data-comment-id="@comment.Id"></i>
                                }
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <p>No comments available. Be teh first one to comment : )</p>
            }
        </div>
    </section>

</main>

<script src="https://kit.fontawesome.com/734a4e4265.js" crossorigin="anonymous"></script>
<script>



   // ------------------ променя сърцето успешно
       document.addEventListener("DOMContentLoaded", function () {
        document.querySelectorAll(".like-button").forEach(button => {
            button.addEventListener("click", function () {
                let commentId = this.getAttribute("data-comment-id");
                let likeCountSpan = this.closest(".comment-actions").querySelector(".like-count");
                 // const userId = "@User.FindFirstValue(ClaimTypes.NameIdentifier)"; // дава логнатия юзър
                   let username = this.closest(".comment-content").querySelector(".username").textContent;
                   

                 console.log(commentId);
                  console.log(username);
                   let main = document.getElementById("currmain");
                    console.log(main)
                    if (!main.classList.contains("authenticated")) {
                 // Пренасочване към страницата за вход
                  let loginUrl = document.getElementById("login");
                 window.location.href = loginUrl;
                 console.log("not logged in");
                 return;
             }
                if (this.classList.contains("fa-heart-o")) {


                  fetch(`/Comment/LikeComment/${commentId}/${username}`, {
                     method: "POST"
                 })
                   console.log("liked start");
                    this.classList.remove("fa-heart-o");
                    this.classList.add("fa-heart");// Пълно сърце
                    likeCountSpan.textContent = parseInt(likeCountSpan.textContent) + 1;// Увеличаване на брояча
                      console.log("liked end");
                }
                   else if (this.classList.contains("fa-heart")){
                      fetch(`/Comment/removeLikeFromComment/${commentId}/${username}`, {
                      method: "POST"
                  })
                    console.log("disliked start");
                    this.classList.remove("fa-heart");
                    this.classList.add("fa-heart-o");// Празно сърце
                    likeCountSpan.textContent = parseInt(likeCountSpan.textContent) - 1; //Намаляване на брояча
                      console.log("disliked end");
                }
            });
        });
    });

    //----------------------------------------------------------------------
              document.addEventListener("DOMContentLoaded", function () {
        document.querySelector(".revealAddCommentSection").addEventListener("click", function () {
            var addCommentSection = document.querySelector(".addCommentSection");
            if (addCommentSection.style.display === "none" || addCommentSection.style.display === "") {
                addCommentSection.style.display = "block";
            } else {
                addCommentSection.style.display = "none";
            }
        });

        document.getElementById("addCommentForm").addEventListener("submit", function (event) {
            var commentText = document.querySelector("textarea[name='commentText']").value.trim();
            var commentImage = document.querySelector("input[name='commentImage']").files.length;
            var errorMessage = document.getElementById("errorMessage");

            if (commentText === "" && commentImage === 0) {
                event.preventDefault();
                errorMessage.style.display = "block";
            } else {
                errorMessage.style.display = "none";
            }
        });
    });


    
  

    



















</script>

<style>
    .hero {
        position: relative;
        width: 100%;
        height: 550px; /* Adjust as needed */
        overflow: hidden;
        margin-bottom: 30px;
    }

    .hero-image {
        height: 100%;
        width: 100%;
        object-fit: cover;
    }

    .hero-image-container {
        border-radius: 10px;
        overflow: hidden;
        height: 100%;
    }

    .hero-text {
        position: absolute;
        top: 50%;
        left: 5%;
        transform: translateY(-50%);
        background: rgba(0, 0, 0, 0.5); /* Optional: Adds readability */
        padding: 20px;
        color: white;
        border-radius: 10px;
    }

    .hero h1 {
        margin: 0;
        font-size: 2.5rem;
    }

    .hero p {
        font-size: 1.2rem;
    }

    .divider {
        width: 100%;
        height: 3px;
        background-color: #ccc;
        margin: 10px auto;
    }

    .project-details, .comments {
        padding: 40px 20px;
        background-color: #f9f9f9;
        border-radius: 10px;
        margin: 20px auto;
        max-width: 1200px;
    }

        .project-details .container, .comments .container {
            max-width: 800px;
            margin: 0 auto;
            text-align: left;
        }

        .project-details h2, .comments h2 {
            font-size: 2rem;
            margin-bottom: 20px;
        }

        .project-details p, .comments p {
            font-size: 1rem;
            line-height: 1.6;
            margin-bottom: 20px;
        }

    .comment {
        display: flex;
        align-items: flex-start;
        margin-bottom: 20px;
    }

    .profile-picture {
        width: 50px; /* Задава ширината на изображението */
        height: 50px; /* Задава височината на изображението */
        border-radius: 50%; /* Закръгля ъглите, за да направи изображението кръгло */
        object-fit: cover; /* Запазва съотношението на изображението и го изрязва, ако е необходимо */
        margin-right: 10px; /* Добавя отстояние отдясно */
    }

    .comment-content {
        flex: 1;
    }

    .comment-date {
        font-size: 0.8rem;
        color: #888;
    }

    .comment-image {
        max-width: 100%;
        height: auto;
        border-radius: 10px;
        margin-top: 10px;
    }

    .comment-actions {
        display: flex;
        align-items: center;
        margin-top: 10px;
    }

    .like-count {
        margin-right: 5px;
    }

    .like-button {
        cursor: pointer;
        color: #888;
    }

        .like-button.fa-heart {
            color: red;
        }


        /* ---------------------------- */

    .revealAddCommentSection {
        padding: 10px 20px;
        background-color: darkorange;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 16px;
        margin-bottom: 20px;
    }

        .revealAddCommentSection:hover {
            background-color: #e69500;
        }

    .addCommentSection {
        margin-top: 20px;
        padding: 20px;
        background-color: #f1f1f1;
        border-radius: 10px;
    }

        .addCommentSection form {
            display: flex;
            flex-direction: column;
        }

        .addCommentSection textarea {
            width: 100%;
            height: 100px;
            margin-bottom: 10px;
            padding: 10px;
            border-radius: 5px;
            border: 1px solid #ccc;
            resize: none;
        }

        .addCommentSection input[type="file"] {
            margin-bottom: 10px;
        }

        .addCommentSection button[type="submit"] {
            align-self: flex-start;
            padding: 10px 20px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

            .addCommentSection button[type="submit"]:hover {
                background-color: #0056b3;
            }

</style>




@* <link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
<script src="https://cdn.quilljs.com/1.3.6/quill.min.js"></script> *@

<script>
    var quillComment = new Quill('#editorComment', {
        theme: 'snow'
    });

    // Синхронизира Quill редактора със скритото поле
    quillComment.on('text-change', function () {
        document.querySelector('#createCommentText').value = quillComment.root.innerHTML;
    });

    document.querySelector('#addCommentForm').onsubmit = function (event) {
        var commentText = document.querySelector('#createCommentText').value.trim();
        var commentImage = document.querySelector('#createCommentImage').files.length > 0;

        // Ако няма текст и няма изображение, спираме изпращането
        if (!commentText && !commentImage) {
            document.querySelector('#errorMessage').style.display = 'block';
            event.preventDefault();
        }
    };
</script>

<style>
    #editorComment {
        height: 200px;
        background-color: #fdfbf3;
    }
</style>

@* asd *@

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Delete comment functionality
        document.querySelectorAll('.delete-comment-btn').forEach(button => {
            button.addEventListener('click', function() {
                const commentId = this.getAttribute('data-comment-id');

                if (confirm('Are you sure you want to delete this comment? This action cannot be undone.')) {
                    deleteComment(commentId);
                }
            });
        });

        function deleteComment(commentId) {
            fetch(`/Comment/Delete/${commentId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                credentials: 'same-origin'
            })
            .then(response => {
                if (response.ok) {
                    // Remove the comment from the DOM or reload the page
                    const commentElement = document.querySelector(`.comment[data-comment-id="${commentId}"]`);
                    if (commentElement) {
                        commentElement.remove();
                    } else {
                        window.location.reload();
                    }
                } else {
                    alert('Failed to delete the comment. Please try again.');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('An error occurred while deleting the comment.');
            });
        }

        // Edit comment functionality
        document.querySelectorAll('.edit-comment-btn').forEach(button => {
            button.addEventListener('click', function() {
                const commentId = this.getAttribute('data-comment-id');
                showEditForm(commentId);
            });
        });

        document.querySelectorAll('.cancel-edit-btn').forEach(button => {
            button.addEventListener('click', function() {
                const commentId = this.getAttribute('data-comment-id');
                hideEditForm(commentId);
            });
        });

        document.querySelectorAll('.save-edit-btn').forEach(button => {
            button.addEventListener('click', function() {
                const commentId = this.getAttribute('data-comment-id');
                saveCommentEdit(commentId);
            });
        });

        function showEditForm(commentId) {
            // Hide the comment body and show the edit form
            document.getElementById(`comment-body-${commentId}`).style.display = 'none';
            document.getElementById(`edit-form-${commentId}`).style.display = 'block';
        }

        function hideEditForm(commentId) {
            // Show the comment body and hide the edit form
            document.getElementById(`comment-body-${commentId}`).style.display = 'block';
            document.getElementById(`edit-form-${commentId}`).style.display = 'none';
        }

        function saveCommentEdit(commentId) {
            const formData = new FormData();
            formData.append('id', commentId);
            console.log(document.getElementById(`edit-text-${commentId}`))
            formData.append('commentText', document.getElementById(`edit-text-${commentId}`).value);

            const imageInput = document.getElementById(`edit-image-${commentId}`);
            if (imageInput.files.length > 0) {
                formData.append('commentImage', imageInput.files[0]);
            }

            fetch('/Comment/Edit', {
                method: 'POST',
                body: formData,
                credentials: 'same-origin'
            })
            .then(response => {
                if (response.ok) {
                    return response.json();
                }
                throw new Error('Network response was not ok.');
            })
            .then(data => {
                if (data.success) {
                    // Update the comment content without reloading the page
                    if (data.text) {
                        const textElement = document.getElementById(`comment-text-${commentId}`);
                        if (textElement) {
                            textElement.innerText  = data.text;
                        } else if (data.text.trim() !== '') {
                            // Create text element if it didn't exist before
                            const commentBody = document.getElementById(`comment-body-${commentId}`);
                            const newTextElement = document.createElement('p');
                            newTextElement.id = `comment-text-${commentId}`;
                            newTextElement.innerText  = data.text;
                            commentBody.appendChild(newTextElement);
                        }
                    }

                    if (data.imagePath) {
                        const imageElement = document.getElementById(`comment-image-${commentId}`);
                        if (imageElement) {
                            imageElement.src = data.imagePath;
                        } else {
                            // Create image element if it didn't exist before
                            const commentBody = document.getElementById(`comment-body-${commentId}`);
                            const newImageElement = document.createElement('img');
                            newImageElement.style.width = '350px';
                            newImageElement.className = 'comment-image';
                            newImageElement.id = `comment-image-${commentId}`;
                            newImageElement.src = data.imagePath;
                            newImageElement.alt = 'Comment Image';
                            commentBody.insertBefore(newImageElement, commentBody.firstChild);
                        }
                    }

                    // Hide the edit form
                    hideEditForm(commentId);
                } else {
                    alert('Failed to update the comment: ' + (data.message || 'Unknown error'));
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('An error occurred while updating the comment.');
            });
        }
    });




</script>
<style>
    /* Add these styles to your CSS file */
    .comment {
        display: flex;
        margin-bottom: 20px;
        position: relative;
    }

    .profile-picture {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        margin-right: 15px;
        object-fit: cover;
    }

    .comment-content {
        flex: 1;
        background-color: #f5f5f5;
        border-radius: 12px;
        padding: 12px;
        position: relative;
    }

    .comment-header {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        margin-bottom: 10px;
    }

    .comment-menu {
        position: relative;
    }

        .comment-menu .btn {
            padding: 0;
            background: none;
            border: none;
        }

        .comment-menu .fa-ellipsis-v {
            font-size: 18px;
            color: #666;
        }

    .comment-date {
        color: #666;
        font-size: 0.85em;
        margin-left: 8px;
    }

    .comment-actions {
        margin-top: 10px;
        display: flex;
        align-items: center;
    }

    .like-button {
        cursor: pointer;
        margin-left: 5px;
        color: #ff4d4d;
    }

    .like-count {
        font-size: 0.9em;
        color: #666;
    }

    .edit-form-container {
        margin-top: 10px;
    }

    .comment-image {
        margin-bottom: 10px;
        border-radius: 8px;
    }
</style>