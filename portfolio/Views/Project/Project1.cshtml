@model Portfolio.Models.Project
@using System.Security.Claims
@{
    ViewData["Title"] = Model?.Title ?? "Project Details";
}

<main>
    <header class="hero">
        <div class="hero-image-container">
            <img class="hero-image" src="@Model.Image.Path" alt="@Model.Title">
        </div>
        <div class="hero-text">
            <h1>@Model.Title</h1>
            <p>@Model.ShortDescription</p>
        </div>
    </header>
    <div class="divider"></div>

    <section class="project-details">
        <div class="container">
            <h2>Project Details</h2>
            <p>@Model.Description</p>
        </div>
    </section>
    <div class="divider"></div>
    <section class="comments">
        <div class="container">
            <h2>Comments</h2>
            @if (Model?.Comments != null && Model.Comments.Any())
            {
                @foreach (var comment in Model.Comments)
                {
                    <div class="comment" data-comment-id="@comment.Id">
                        <img class="profile-picture" src="@(comment.User?.ProfilePicture?.Path ?? "default-profile-picture.jpg")" alt="Profile Picture" />

                        <div class="comment-content">
                            <p><strong><span class="username">@(comment.User?.UserName ?? "Unknown User")</span></strong> <span class="comment-date">@comment.DateAdded.ToString("dd MMM yyyy")</span></p>
                            
                            @if (comment.Image != null)
                            {
                                <img class="comment-image" src="@comment.Image.Path" alt="Comment Image" />
                            }
                            @if (!string.IsNullOrEmpty(comment.Text))
                            {
                                <p>@comment.Text</p>
                            }
                           @*  <div class="comment-actions">
                                <span class="like-count">@comment.LikedComments.Count</span>
                                <i class="fa @(comment.LikedComments.Any(l => l.UserId == int.Parse(User.FindFirstValue(ClaimTypes.NameIdentifier))) ? "fa-heart" : "fa-heart-o")
                               like-button"
                                   data-comment-id="@comment.Id">
                                </i>
                            </div> *@
                            <div class="comment-actions">
                                <span class="like-count">@comment.LikedComments.Count</span>
                                <i class="fa @(comment.LikedComments.Any(l => l.UserId == int.Parse(User.FindFirstValue(ClaimTypes.NameIdentifier))) ? "fa-heart" : "fa-heart-o") like-button"
                                   data-comment-id="@comment.Id"></i>
                            </div>

                        </div>
                    </div>
                }
            }
            else
            {
                <p>No comments available.</p>
            }
        </div>
    </section>

</main>

<script src="https://kit.fontawesome.com/734a4e4265.js" crossorigin="anonymous"></script>
<script>
    // document.addEventListener("DOMContentLoaded", function () {
    //     document.querySelectorAll(".like-button").forEach(button => {
    //         button.addEventListener("click", function () {
    //             const commentId = this.getAttribute("data-comment-id");
    //             const userId = "@User.FindFirstValue(ClaimTypes.NameIdentifier)"; Get the actual user ID

    //             fetch(`/Comment/LikeComment/${commentId}/${userId}`, {
    //                 method: "POST"
    //             }).then(response => response.json())
    //               .then(data => {
    //                   if (data.liked) {
    //                       this.classList.remove("fa-heart-o");
    //                       this.classList.add("fa-heart");
    //                   } else {
    //                       this.classList.remove("fa-heart");
    //                       this.classList.add("fa-heart-o");
    //                   }
    //                   this.previousElementSibling.textContent = data.likeCount;
    //               });
    //         });
    //     });
    // });
        /*  document.addEventListener("DOMContentLoaded", function () {
        document.querySelectorAll(".like-button").forEach(button => {
            button.addEventListener("click", function () {
                let commentId = this.dataset.commentId;

                fetch(`/Comment/ToggleLike/${commentId}`, {
                    method: "POST",
                    headers: {
                        "X-Requested-With": "XMLHttpRequest",
                        "X-CSRF-TOKEN": document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.liked) {
                        Ако коментарът е харесан
                        this.querySelector("i").classList.remove("fa-heart-o"); Премахваме празното сърце
                        this.querySelector("i").classList.add("fa-heart"); Добавяме пълно сърце
                    } else {
                        Ако коментарът не е харесан
                        this.querySelector("i").classList.remove("fa-heart"); Премахваме пълното сърце
                        this.querySelector("i").classList.add("fa-heart-o"); Добавяме празно сърце
                    }
                    this.querySelector(".like-count").textContent = data.likeCount; Обновяваме броя на харесванията
                })
                .catch(error => console.error("Error:", error));
            });

            Проверка дали коментарът е харесан
            let commentId = button.dataset.commentId;
            fetch(`/Comment/IsLikedByUser/${commentId}`)
                .then(response => response.json())
                .then(data => {
                    if (data.isLiked) {
                        button.querySelector("i").classList.remove("fa-heart-o");
                        button.querySelector("i").classList.add("fa-heart");
                    }
                });
        });
    });

    */


   // ------------------ променя сърцето успешно
       document.addEventListener("DOMContentLoaded", function () {
        document.querySelectorAll(".like-button").forEach(button => {
            button.addEventListener("click", function () {
                let commentId = this.getAttribute("data-comment-id");
                let likeCountSpan = this.closest(".comment-actions").querySelector(".like-count");
                 // const userId = "@User.FindFirstValue(ClaimTypes.NameIdentifier)"; // дава логнатия юзър
                   let username = this.closest(".comment-content").querySelector(".username").textContent;
                   

                 console.log(commentId);
                  console.log(username);

                if (this.classList.contains("fa-heart-o")) {


                  fetch(`/Comment/LikeComment/${commentId}/${username}`, {
                     method: "POST"
                 })

                    this.classList.remove("fa-heart-o");
                    this.classList.add("fa-heart");// Пълно сърце
                    likeCountSpan.textContent = parseInt(likeCountSpan.textContent) + 1;// Увеличаване на брояча
                }
                   else if (this.classList.contains("fa-heart")){
                      fetch(`/Comment/removeLikeFromComment/${commentId}/${username}`, {
                      method: "POST"
                  })
                    this.classList.remove("fa-heart");
                    this.classList.add("fa-heart-o");// Празно сърце
                    likeCountSpan.textContent = parseInt(likeCountSpan.textContent) - 1; //Намаляване на брояча
                }
            });
        });
    });

    //     document.addEventListener("DOMContentLoaded", function () {
    //     document.querySelectorAll(".like-button").forEach(button => {
    //         button.addEventListener("click", function () {
    //             let commentId = this.getAttribute("data-comment-id");
    //             let likeCountSpan = this.closest(".comment-actions").querySelector(".like-count");

    //             fetch(`/Comment/ToggleLike/${commentId}`, {
    //                 method: "POST",
    //                 headers: {
    //                     "Content-Type": "application/json",
    //                     "X-Requested-With": "XMLHttpRequest"
    //                 }
    //             })
    //             .then(response => response.json())
    //             .then(data => {
    //                 if (data.isLiked) {
    //                     this.classList.remove("fa-heart-o");
    //                     this.classList.add("fa-heart"); // Харесано (пълно сърце)
    //                 } else {
    //                     this.classList.remove("fa-heart");
    //                     this.classList.add("fa-heart-o"); // Отхаресано (празно сърце)
    //                 }
    //                 likeCountSpan.textContent = data.likeCount; // Обнови брояча
    //             })
    //             .catch(error => console.error("Error:", error));
    //         });
    //     });
    // });




</script>

<style>
    .hero {
        position: relative;
        width: 100%;
        height: 550px; /* Adjust as needed */
        overflow: hidden;
        margin-bottom: 30px;
    }

    .hero-image {
        height: 100%;
        width: 100%;
        object-fit: cover;
    }

    .hero-image-container {
        border-radius: 10px;
        overflow: hidden;
        height: 100%;
    }

    .hero-text {
        position: absolute;
        top: 50%;
        left: 5%;
        transform: translateY(-50%);
        background: rgba(0, 0, 0, 0.5); /* Optional: Adds readability */
        padding: 20px;
        color: white;
        border-radius: 10px;
    }

    .hero h1 {
        margin: 0;
        font-size: 2.5rem;
    }

    .hero p {
        font-size: 1.2rem;
    }

    .divider {
        width: 100%;
        height: 3px;
        background-color: #ccc;
        margin: 10px auto;
    }

    .project-details, .comments {
        padding: 40px 20px;
        background-color: #f9f9f9;
        border-radius: 10px;
        margin: 20px auto;
        max-width: 1200px;
    }

        .project-details .container, .comments .container {
            max-width: 800px;
            margin: 0 auto;
            text-align: left;
        }

        .project-details h2, .comments h2 {
            font-size: 2rem;
            margin-bottom: 20px;
        }

        .project-details p, .comments p {
            font-size: 1rem;
            line-height: 1.6;
            margin-bottom: 20px;
        }

    .comment {
        display: flex;
        align-items: flex-start;
        margin-bottom: 20px;
    }

    .profile-picture {
        width: 50px; /* Задава ширината на изображението */
        height: 50px; /* Задава височината на изображението */
        border-radius: 50%; /* Закръгля ъглите, за да направи изображението кръгло */
        object-fit: cover; /* Запазва съотношението на изображението и го изрязва, ако е необходимо */
        margin-right: 10px; /* Добавя отстояние отдясно */
    }

    .comment-content {
        flex: 1;
    }

    .comment-date {
        font-size: 0.8rem;
        color: #888;
    }

    .comment-image {
        max-width: 100%;
        height: auto;
        border-radius: 10px;
        margin-top: 10px;
    }

    .comment-actions {
        display: flex;
        align-items: center;
        margin-top: 10px;
    }

    .like-count {
        margin-right: 5px;
    }

    .like-button {
        cursor: pointer;
        color: #888;
    }

        .like-button.fa-heart {
            color: red;
        }
</style>




